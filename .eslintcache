[{"/Users/nathan_power/workspaces/oss/ag-grid-bug-repro/src/index.js":"1","/Users/nathan_power/workspaces/oss/ag-grid-bug-repro/src/reportWebVitals.js":"2","/Users/nathan_power/workspaces/oss/ag-grid-bug-repro/src/App.js":"3"},{"size":500,"mtime":1611397132993,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1611397132995,"results":"6","hashOfConfig":"5"},{"size":5468,"mtime":1611404211503,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"18dkjkp",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/nathan_power/workspaces/oss/ag-grid-bug-repro/src/index.js",[],["16","17"],"/Users/nathan_power/workspaces/oss/ag-grid-bug-repro/src/reportWebVitals.js",[],"/Users/nathan_power/workspaces/oss/ag-grid-bug-repro/src/App.js",["18","19","20","21"],"import React, { Component } from 'react';\nimport { ModuleRegistry } from '@ag-grid-community/core';\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-alpine.css';\nimport isEqual from 'lodash.isequal';\n\nModuleRegistry.registerModules([ClientSideRowModelModule, RowGroupingModule]);\n\nconst cellClassRules = {\n  highlight: params => {\n\n    const { colDef, rowIndex, context: { highlight } = {} } = params;\n\n    return highlight.colId === colDef.colId && highlight.rowIndex ===  rowIndex;\n\n    if (highlight.colId !== undefined && highlight.rowIndex !== undefined) {\n      return (highlight.colId === 'rowName' || colDef.colId === highlight.colId) &&\n        rowIndex === highlight.rowIndex;\n    }\n\n    if (highlight.colId !== undefined) {\n      return highlight.colId === colDef.colId;\n    }\n\n    if (highlight.rowIndex !== undefined) {\n      return highlight.rowIndex === rowIndex;\n    }\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          field: 'athlete',\n          colId: 'athlete'\n        },\n        {\n          field: 'age',\n          colId: 'age',\n          maxWidth: 90,\n          valueParser: numberParser\n        },\n        {\n          field: 'country',\n          colId: 'country'\n        },\n        {\n          field: 'year',\n          colId: 'year',\n          maxWidth: 90,\n          valueParser: numberParser\n        },\n        {\n          field: 'date',\n          colId: 'date'\n        },\n        {\n          field: 'sport',\n          coldId: 'sport'\n        },\n        {\n          field: 'gold',\n          colId: 'gold',\n          valueParser: numberParser\n        },\n        {\n          field: 'silver',\n          colId: 'silver',\n          valueParser: numberParser\n        },\n        {\n          field: 'bronze',\n          colId: 'bronze',\n          valueParser: numberParser\n        },\n      ],\n      defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n        editable: true,\n        cellClassRules\n      },\n      rowData: null,\n      highlight: {}\n    };\n  }\n\n  refreshGrid = () =>  {\n    if (!this.gridApi) {\n      return;\n    }\n\n    this.gridApi.refreshCells();\n  }\n\n  onCellMouseOver = (ev) => {\n    const { colDef: { colId }, rowIndex, data } = ev;\n    if (colId === 'rowName') {\n      this.setHighlight({ rowIndex, data });\n    } else {\n      this.setHighlight({ colId, rowIndex, data });\n    }\n  }\n\n  onCellMouseOut = (ev) => {\n    const { colDef: { colId }, rowIndex } = ev;\n\n    // ensure we clear the correct highlight as mouseover on the next cell may\n    // have been called before mouseout on the previous cell in the case of\n    // header mouseover (which uses custom header cells)\n    const { colId: currentColId, rowIndex: currentRowIndex } = this.state.highlight;\n    if ((colId === currentColId || currentColId === undefined) && rowIndex === currentRowIndex) {\n      this.clearHighlight();\n    }\n  }\n\n  setHighlight  = (highlight) => {\n    if (isEqual(this.state.highlight, highlight)) {\n      return;\n    }\n\n    this.setState({ highlight }, this.refreshGrid);\n  }\n\n  clearHighlight() {\n    this.setState({ highlight: {}, contextMenuTarget: {} }, this.refreshGrid);\n  }\n\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    const httpRequest = new XMLHttpRequest();\n    const updateData = (data) => {\n      this.setState({ rowData: data });\n    };\n\n    httpRequest.open(\n      'GET',\n      'https://www.ag-grid.com/example-assets/olympic-winners.json'\n    );\n    httpRequest.send();\n    httpRequest.onreadystatechange = () => {\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n        updateData(JSON.parse(httpRequest.responseText));\n      }\n    };\n  };\n\n  render() {\n    return (\n      <div style={{ width: '100%', height: '100vh' }}>\n        <div\n          id=\"myGrid\"\n          style={{\n            height: '100%',\n            width: '100%',\n          }}\n          className=\"ag-theme-alpine\"\n        >\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            defaultColDef={this.state.defaultColDef}\n            onGridReady={this.onGridReady}\n            rowData={this.state.rowData}\n            context={{ highlight: this.state.highlight }}\n            onCellMouseOver={this.onCellMouseOver}\n            onCellMouseOut={this.onCellMouseOut}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction cellStyle(params) {\n  var color = numberToColor(params.value);\n  return { backgroundColor: color };\n}\nfunction cellClass(params) {\n  return params.value === 'Swimming' ? 'rag-green' : 'rag-amber';\n}\nfunction numberToColor(val) {\n  if (val === 0) {\n    return '#ffaaaa';\n  } else if (val === 1) {\n    return '#aaaaff';\n  } else {\n    return '#aaffaa';\n  }\n}\nfunction ragRenderer(params) {\n  return '<span class=\"rag-element\">' + params.value + '</span>';\n}\nfunction numberParser(params) {\n  var newValue = params.newValue;\n  var valueAsNumber;\n  if (newValue === null || newValue === undefined || newValue === '') {\n    valueAsNumber = null;\n  } else {\n    valueAsNumber = parseFloat(params.newValue);\n  }\n  return valueAsNumber;\n}\n\n\nexport default App;\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":19,"column":5,"nodeType":"28","messageId":"29","endLine":30,"endColumn":6},{"ruleId":"30","severity":1,"message":"31","line":183,"column":10,"nodeType":"32","messageId":"33","endLine":183,"endColumn":19},{"ruleId":"30","severity":1,"message":"34","line":187,"column":10,"nodeType":"32","messageId":"33","endLine":187,"endColumn":19},{"ruleId":"30","severity":1,"message":"35","line":199,"column":10,"nodeType":"32","messageId":"33","endLine":199,"endColumn":21},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unreachable","Unreachable code.","IfStatement","unreachableCode","no-unused-vars","'cellStyle' is defined but never used.","Identifier","unusedVar","'cellClass' is defined but never used.","'ragRenderer' is defined but never used.","no-global-assign","no-unsafe-negation"]